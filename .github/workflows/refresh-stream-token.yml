name: Refresh Cloudflare Stream Token (BG-only)

on:
  schedule:
    - cron: "0 */12 * * *"   # every 12 hours
  workflow_dispatch:

permissions:
  contents: write        # commit to a branch
  pull-requests: write   # open/merge PRs

concurrency:
  group: refresh-stream-token
  cancel-in-progress: true

jobs:
  refresh:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      # Fetch a BG-only token with TTL 24h — prints HTTP status + body for debugging
      - name: Fetch signed token (BG-only, 24h) — debug
        id: token
        env:
          ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}
          API_TOKEN:  ${{ secrets.CF_API_TOKEN }}
          VIDEO_ID:   ${{ vars.CF_VIDEO_ID }}
        run: |
          set -e
          JSON='{"ttl":1440,"accessRules":[{"type":"ip.geoip.country","action":"allow","country":["BG"]}]}'
          echo "Requesting token for video: $VIDEO_ID"
          TMP_BODY="$(mktemp)"
          HTTP_CODE=$(
            curl -sS -o "$TMP_BODY" -w "%{http_code}" \
              --request POST \
              "https://api.cloudflare.com/client/v4/accounts/$ACCOUNT_ID/stream/$VIDEO_ID/token" \
              --header "Authorization: Bearer $API_TOKEN" \
              --header "Content-Type: application/json" \
              --data "$JSON"
          )
          echo "HTTP status: $HTTP_CODE"
          cat "$TMP_BODY" || true; echo
          [ "$HTTP_CODE" = "200" ] || exit 1
          TOKEN=$(jq -r '.result.token' < "$TMP_BODY")
          [ -n "$TOKEN" ] && [ "$TOKEN" != "null" ] || exit 1
          echo "token=$TOKEN" >> "$GITHUB_OUTPUT"

      - name: Update front matter signed_token
        if: ${{ success() && steps.token.outputs.token != '' }}
        env:
          CONTENT_FILE: ${{ vars.CONTENT_FILE_PATH }}
          TOKEN: ${{ steps.token.outputs.token }}
        run: |
          perl -0777 -i -pe 's/(^|\n)\s*signed_token:\s*"(?:[^"\\]|\\.)*"/$1signed_token: "'$TOKEN'"/s' "$CONTENT_FILE"
          echo "Updated $CONTENT_FILE"

      # Create a PR from a throwaway branch
      - name: Create PR with changes
        if: ${{ success() && steps.token.outputs.token != '' }}
        id: cpr
        uses: peter-evans/create-pull-request@v6
        with:
          commit-message: "chore: refresh Cloudflare Stream signed_token (BG-only, 24h)"
          branch: chore/refresh-stream-token
          title: "Refresh Stream signed_token (BG-only, 24h)"
          body: |
            Automated token refresh:
            - Video: `${{ vars.CF_VIDEO_ID }}`
            - File:  `${{ vars.CONTENT_FILE_PATH }}`
            - Geo:   BG only
            - TTL:   1440 min
          labels: automation, cloudflare, token
          delete-branch: true
          draft: false

      # Turn on auto-merge for that PR (requires repo setting "Allow auto-merge")
      - name: Enable PR auto-merge
        if: ${{ steps.cpr.outputs.pull-request-number }}
        uses: peter-evans/enable-pull-request-automerge@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          pull-request-number: ${{ steps.cpr.outputs.pull-request-number }}
          merge-method: squash

      # (Optional) Try to merge immediately via gh if no required checks block it.
      - name: Try immediate merge (best-effort)
        if: ${{ steps.cpr.outputs.pull-request-url }}
        env:
          PR_URL: ${{ steps.cpr.outputs.pull-request-url }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh pr merge "$PR_URL" --squash --delete-branch --auto || true

      # NOTE: We do NOT trigger Netlify here, because it would fire before merge.
      # Netlify will build automatically after the PR merges to main (via your Git integration or webhook).
