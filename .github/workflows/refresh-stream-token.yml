name: Refresh Cloudflare Stream Token (BG-only)

on:
  schedule:
    - cron: "0 */12 * * *"
  workflow_dispatch:

permissions:
  contents: write

concurrency:
  group: refresh-stream-token
  cancel-in-progress: true

jobs:
  refresh:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0        # <-- needed for rebase on main

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Fetch signed token (BG-only, 24h) â€” debug
        id: token
        env:
          ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}
          API_TOKEN:  ${{ secrets.CF_API_TOKEN }}
          VIDEO_ID:   ${{ vars.CF_VIDEO_ID }}
        run: |
          set -e
          JSON='{"ttl":1440,"accessRules":[{"type":"ip.geoip.country","action":"allow","country":["BG"]}]}'
          echo "Requesting token for video: $VIDEO_ID"

          TMP_BODY="$(mktemp)"
          HTTP_CODE=$(
            curl -sS -o "$TMP_BODY" -w "%{http_code}" \
              --request POST \
              "https://api.cloudflare.com/client/v4/accounts/$ACCOUNT_ID/stream/$VIDEO_ID/token" \
              --header "Authorization: Bearer $API_TOKEN" \
              --header "Content-Type: application/json" \
              --data "$JSON"
          )
          echo "HTTP status: $HTTP_CODE"
          cat "$TMP_BODY" || true; echo
          [ "$HTTP_CODE" = "200" ] || exit 1

          TOKEN=$(jq -r '.result.token' < "$TMP_BODY")
          [ -n "$TOKEN" ] && [ "$TOKEN" != "null" ] || exit 1
          echo "token=$TOKEN" >> "$GITHUB_OUTPUT"

      - name: Update front matter signed_token
        if: ${{ success() && steps.token.outputs.token != '' }}
        env:
          CONTENT_FILE: ${{ vars.CONTENT_FILE_PATH }}
          TOKEN: ${{ steps.token.outputs.token }}
        run: |
          perl -0777 -i -pe 's/(^|\n)\s*signed_token:\s*"(?:[^"\\]|\\.)*"/$1signed_token: "'$TOKEN'"/s' "$CONTENT_FILE"
          echo "Updated $CONTENT_FILE"

      - name: Commit, rebase & push
        if: ${{ success() && steps.token.outputs.token != '' }}
        env:
          BRANCH_NAME: ${{ github.ref_name }}   # usually 'main'
        run: |
          set -e
          git config user.name  "token-bot"
          git config user.email "actions@users.noreply.github.com"
          git add -A
          git commit -m "chore: refresh Cloudflare Stream signed_token (BG-only, 24h)" || echo "No changes to commit"

          # rebase onto latest remote main to avoid non-fast-forward
          git fetch origin "$BRANCH_NAME"
          git pull --rebase origin "$BRANCH_NAME" || true
          # push to the same branch
          git push origin HEAD:"$BRANCH_NAME"

      - name: Trigger Netlify build
        if: always()
        env:
          NETLIFY_BUILD_HOOK: ${{ secrets.NETLIFY_BUILD_HOOK }}
        run: |
          if [ -n "$NETLIFY_BUILD_HOOK" ]; then
            curl -s -X POST "$NETLIFY_BUILD_HOOK" || true
          else
            echo "No NETLIFY_BUILD_HOOK; skipping."
          fi
