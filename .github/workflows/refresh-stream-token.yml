name: Refresh Cloudflare Stream Tokens (BG-only)

on:
  # 01:30 UTC every day (â‰ˆ 04:30 BG summer time)
  schedule:
    - cron: "30 01 * * *"
  # When film files change
  push:
    paths:
      - "content/films/*.md"
      - "content/films/**/*.md"
  # Manual run
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

concurrency:
  group: refresh-stream-token
  cancel-in-progress: true

jobs:
  refresh:
    runs-on: ubuntu-latest

    env:
      ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}
      API_TOKEN:  ${{ secrets.CF_API_TOKEN }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install tools
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Build list of target film files
        id: files
        shell: bash
        run: |
          set -euo pipefail

          list_files() {
            # Find all candidate film files
            find content/films -type f \( -name "*.md" -o -name "*.markdown" \) | sort
          }

          if [[ "${{ github.event_name }}" == "push" ]]; then
            BEFORE="${{ github.event.before }}"
            AFTER="${{ github.sha }}"
            # If BEFORE is all zeros (e.g., first push), just scan all
            if [[ "$BEFORE" =~ ^0+$ ]]; then
              CANDIDATES="$(list_files)"
            else
              # Only files changed in this push
              CANDIDATES="$(git diff --name-only "$BEFORE" "$AFTER" -- content/films | sort || true)"
            fi
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" || "${{ github.event_name }}" == "schedule" ]]; then
            CANDIDATES="$(list_files)"
          else
            CANDIDATES="$(list_files)"
          fi

          echo "Candidates:"
          echo "$CANDIDATES"

          # Filter to those that have show_watch_button: true
          TARGETS=""
          while IFS= read -r f; do
            [[ -z "$f" ]] && continue
            if grep -Eq '^[[:space:]]*show_watch_button:[[:space:]]*true[[:space:]]*$' "$f"; then
              TARGETS+="$f"$'\n'
            fi
          done <<< "$CANDIDATES"

          TARGETS="$(echo "$TARGETS" | sed '/^$/d' || true)"
          echo "Targets with show_watch_button: true:"
          echo "$TARGETS"

          # Write to output (newline -> ::set-output safe by json)
          TARGETS_JSON=$(printf '%s\n' "$TARGETS" | jq -Rsc 'split("\n")|map(select(length>0))')
          echo "files=$TARGETS_JSON" >> "$GITHUB_OUTPUT"

      - name: Generate tokens and update front matter
        if: ${{ steps.files.outputs.files != '[]' }}
        id: update
        shell: bash
        env:
          FILES_JSON: ${{ steps.files.outputs.files }}
          ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}
          API_TOKEN:  ${{ secrets.CF_API_TOKEN }}
        run: |
          set -euo pipefail

          changed=0

          readarray -t FILES < <(echo "$FILES_JSON" | jq -r '.[]')

          for CONTENT_FILE in "${FILES[@]}"; do
            echo "----"
            echo "Processing: $CONTENT_FILE"

            # Extract video_id (first occurrence)
            VIDEO_ID=$(awk -F': *' '
              BEGIN{vid=""}
              /^video_id:/ {
                gsub(/"/,"",$2);
                if (vid=="") vid=$2
              }
              END{print vid}
            ' "$CONTENT_FILE")

            if [[ -z "$VIDEO_ID" ]]; then
              echo "No video_id found in $CONTENT_FILE, skipping." >&2
              continue
            fi

            echo "video_id: $VIDEO_ID"

            # Request BG-only token (TTL 1440 minutes)
            JSON='{"ttl":1440,"accessRules":[{"type":"ip.geoip.country","action":"allow","country":["BG"]}]}'
            TMP_BODY="$(mktemp)"
            HTTP_CODE=$(
              curl -sS -o "$TMP_BODY" -w "%{http_code}" \
                --request POST \
                "https://api.cloudflare.com/client/v4/accounts/${ACCOUNT_ID}/stream/${VIDEO_ID}/token" \
                --header "Authorization: Bearer ${API_TOKEN}" \
                --header "Content-Type: application/json" \
                --data "$JSON"
            )
            echo "HTTP status: $HTTP_CODE"
            cat "$TMP_BODY" || true; echo

            if [[ "$HTTP_CODE" != "200" ]]; then
              echo "Token request failed for $VIDEO_ID" >&2
              continue
            fi

            TOKEN=$(jq -r '.result.token' < "$TMP_BODY")
            if [[ -z "$TOKEN" || "$TOKEN" == "null" ]]; then
              echo "Empty token for $VIDEO_ID" >&2
              continue
            fi

            # Update front matter:
            # 1) If signed_token exists -> replace its value
            # 2) Else insert a new signed_token line right after the first video_id line
            if grep -q '^[[:space:]]*signed_token:' "$CONTENT_FILE"; then
              perl -0777 -i -pe 's/(^|\n)\s*signed_token:\s*"(?:[^"\\]|\\.)*"/$1signed_token: "'$TOKEN'"/s' "$CONTENT_FILE"
              echo "Replaced existing signed_token in $CONTENT_FILE"
            else
              # Insert after first video_id line
              awk -v token="$TOKEN" '
                BEGIN{done=0}
                {
                  print $0
                  if (!done && $0 ~ /^[[:space:]]*video_id:/) {
                    print "signed_token: \"" token "\""
                    done=1
                  }
                }
              ' "$CONTENT_FILE" > "$CONTENT_FILE.tmp"
              mv "$CONTENT_FILE.tmp" "$CONTENT_FILE"
              echo "Inserted signed_token after video_id in $CONTENT_FILE"
            fi

            changed=$((changed+1))
          done

          echo "changed=$changed" >> "$GITHUB_OUTPUT"

      - name: Create PR with changes
        if: ${{ steps.update.outputs.changed != '0' }}
        id: cpr
        uses: peter-evans/create-pull-request@v6
        with:
          commit-message: "chore: refresh Cloudflare Stream signed_token(s) (BG-only, 24h)"
          branch: chore/refresh-stream-tokens
          title: "Refresh Stream signed_token(s) (BG-only, 24h)"
          body: |
            Automated token refresh for files where `show_watch_button: true`.
            - Schedule: nightly 01:30 UTC
            - Geo: BG only
            - TTL: 1440 minutes
          labels: automation, cloudflare, token
          delete-branch: true
          draft: false

      - name: Enable PR auto-merge
        if: ${{ steps.cpr.outputs.pull-request-number }}
        uses: peter-evans/enable-pull-request-automerge@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          pull-request-number: ${{ steps.cpr.outputs.pull-request-number }}
          merge-method: squash

      - name: Try immediate merge (best-effort)
        if: ${{ steps.cpr.outputs.pull-request-url }}
        env:
          PR_URL: ${{ steps.cpr.outputs.pull-request-url }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh pr merge "$PR_URL" --squash --delete-branch --auto || true
